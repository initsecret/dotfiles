" .vimrc
"
" -----------------------------------------------------------------------------
" Vundle stuff
" -----------------------------------------------------------------------------

set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'preservim/nerdtree'
Plugin 'dracula/vim', {'name':'dracula'}
Plugin 'lervag/vimtex'
Plugin 'maralla/completor.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'morhetz/gruvbox'
Plugin 'dahu/vim-fanfingtastic'
call vundle#end()
filetype plugin indent on

" -----------------------------------------------------------------------------
" Some of my stuff
" -----------------------------------------------------------------------------

set background=dark
set t_Co=256

set textwidth=80
syntax on

set number
set shiftwidth=4
set softtabstop=4
set expandtab
if has("gui_running")
    colorscheme gruvbox
else
    colorscheme dracula
endif


set mouse=a

set spell

" Use system clipboard
set clipboard=unnamed

" mapping to make movements operate on 1 screen line in wrap mode
" From https://stackoverflow.com/a/4952200
function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" Skim for viewing latex documents
let g:vimtex_view_method = "skim"

" Space as leader
nnoremap <SPACE> <Nop>
let mapleader=" "

" select all
map <Leader>a ggVG
" edit vimrc
map <leader>v :tabnew ~/.vimrc<cr>
" reload vimrc when saved
au BufWritePost .vimrc so ~/.vimrc
" save file
noremap <Leader>s :update<CR>
" select all
map <Leader>r vipgq
" save file
noremap <Leader>s :update<CR>
" fuzzy file search
noremap <Leader>f :Files<CR>
" ripgrep
noremap <Leader>g :Rg 

" jj to escape insert mode
imap jj <Esc>

" -----------------------------------------------------------------------------
" From http://vim.wikia.com/wiki/Example_vimrc
" -----------------------------------------------------------------------------
set wildmenu
set showcmd
set hlsearch

set ignorecase
set smartcase

set backspace=indent,eol,start
set autoindent
 
set confirm
set cmdheight=2

nnoremap <C-L> :nohl<CR><C-L>

" -----------------------------------------------------------------------------
" More of my stuff
" -----------------------------------------------------------------------------

" NerdTree on Ctrl-n
map <C-n> :NERDTreeToggle<CR>

" Show trailing spaces
set list
set listchars+=trail:â—¦

" Navigating splits
nnoremap <Leader>j <C-W><C-J>
nnoremap <Leader>k <C-W><C-K>
nnoremap <Leader>l <C-W><C-L>
nnoremap <Leader>h <C-W><C-H>

" -----------------------------------------------------------------------------
" From https://github.com/maralla/completor.vim
" -----------------------------------------------------------------------------

" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.

" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^[[:keyword:][:ident:]]'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Use `tab` key to select completions.  Default is arrow keys.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab to trigger auto completion.  Default suggests completions as you type.
let g:completor_auto_trigger = 0
inoremap <expr> <Tab> Tab_Or_Complete()

map <c-\> <Plug>CompletorCppJumpToPlaceholder
imap <c-\> <Plug>CompletorCppJumpToPlaceholder
